\documentclass[11pt]{article}

\input{inputs/header}

\usepackage{titlesec}
\usepackage{chngcntr}
\usepackage{etoolbox}

% Remove the numbering from sections
\titleformat{\section}{\normalfont\Large\bfseries}{}{0pt}{}

% Reset the subsection counter at the start of each section
\counterwithin*{subsection}{section}

% Change the numbering for subsections to have an S prefix and remove chapter numbering
\renewcommand{\thesubsection}{S\arabic{subsection}}

% \setcounter{tocdepth}{1}

<<packages, include=FALSE>>=
library(tidyverse)
library(pomp)
library(haitipkg)
library(spatPomp)
library(doParallel)
library(doRNG)
library(knitr)
library(latex2exp)

options(
  scipen = 0,
  help_type = "html",
  stringsAsFactors = FALSE,
  continue = "+  ",
  width = 70,
  useFancyQuotes = FALSE,
  reindent.spaces = 2,
  xtable.comment = FALSE
)

opts_chunk$set(
  tidy.opts=list(
    keep.blank.line=FALSE
  ),
  comment="",
  fig.path = 'figure/',
  echo=FALSE,
  fig.align="center",
  dev="pdf",
  dev.args=list(
    bg="transparent",
    pointsize=9
  )
)

if (!dir.exists("../model3/si")) {
  dir.create("../model3/si", recursive = TRUE)
}

myround <- function(x, digits = 1) {
  # taken from the broman package
  if (digits < 1)
    stop("This is intended for the case digits >= 1.")
  if (length(digits) > 1) {
    digits <- digits[1]
    warning("Using only digits[1]")
  }
  tmp <- sprintf(paste("%.", digits, "f", sep = ""), x)
  zero <- paste0("0.", paste(rep("0", digits), collapse = ""))
  tmp[tmp == paste0("-", zero)] <- zero
  tmp
}
@

\begin{document}

%%%%%%%%%% START

\section{Confidence Intervals for Model Parameters}\label{sec:ci}

In this section we provide confidence intervals for all model parameters, excluding those that take unique values for each spatial unit.
For each model and parameter, we use principles of profile likelihood to obtain confidence intervals \cite{pawitan01}.
Due to the non-linear and stochastic nature of Models~1 and 3, exact evaluations of the profile log-likelihood are difficult to obtain.
Instead, the log-likelihood at each point of the profile is estimated using via Monte-Carlo based particle filter methods.
We therefore obtain confidence intervals for the parameters of Model~1 and Model~3 using the Monte Carlo adjust profile (MCAP) algorithm \cite{ionides17}.

In each subsection, we provide figures that show the curvature of the profile log-likelihood near the MLE (Figures~\ref{fig:m1Profs}--\ref{fig:m3Profs}). 
In these figures, the parameter values are shown on the transformed scale in which the profile was calculated. 

\subsection{Model~1 parameters}

Parameter estimates for Model~1, along with the MCAP confidence intervals for the estimate, are given in Table~\ref{tab:mod1CI}. 
Figure~\ref{fig:m1Profs} displays the Monte Carlo evaluations of the profile likelihood values, obtained using a particle filter. 

<<Load Model 1 Confidence Intervals, include=FALSE, message=FALSE, echo=FALSE>>=
H1_profiles <- readRDS("../model1/run_level_3/h1_profiles.rds")

# TAKEN FROM STACK OVERFLOW:
# https://stackoverflow.com/a/44958156
midcut<-function(x,from,to,by) {
  ## cut the data into bins...
  x=cut(x,seq(from,to,by),include.lowest=T)
  ## make a named vector of the midpoints, names=binnames
  vec=seq(from+by/2,to-by/2,by)
  names(vec)=levels(x)
  ## use the vector to map the names of the bins to the midpoint values
  unname(vec[x])
}

prof_params <- c(
  'betat', 'tau_epi', 'tau_end', 'rho', 'nu', 'sig_sq_epi',
  'sig_sq_end', 'E_0', 'I_0', 'beta1', 'beta2', 'beta3',
  'beta4', 'beta5', 'beta6'
)

H1_profiles_long <- H1_profiles %>%
  select(prof_var, logLik, logLik_se, all_of(prof_params), -E_0, -I_0, -tau_end, -tau_epi, -rho) %>%
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(variable == prof_var) %>%
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 1)

# Tau done on log-scale
H1_long_tau <- H1_profiles %>%
  select(prof_var, logLik, logLik_se, tau_end, tau_epi) %>%
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(value <= 1e+12) %>%
  mutate(value = log(value)) %>%
  filter(variable == prof_var) %>%
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 1)

H1_long_rho <- H1_profiles %>%
  select(prof_var, logLik, logLik_se, rho) %>%
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(value > 0.15) %>%
  filter(variable == prof_var) %>%
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 1)

# E_0, I_0 need to be treated slightly differently
H1_E0_I0_long <- H1_profiles %>%
  select(prof_var, logLik, logLik_se, E_0, I_0) %>%
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(variable == prof_var) %>%
  mutate(value = value * 10911819) %>%
  mutate(value = midcut(value, from = -499, to = 24501, by = 1000)) %>%
  # mutate(value = value / 10911819) %>% 
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 1)

H1_profiles_long <- bind_rows(H1_profiles_long, H1_E0_I0_long, H1_long_tau, H1_long_rho)
@

<<Create H1 Profile CIs>>=
all_mcaps <- list()
all_ci <- list()
for (p in prof_params) {
  
  mcap_tmp <- mcap(
    logLik = H1_profiles_long %>% filter(prof_var == p) %>% pull(logLik),
    parameter = H1_profiles_long %>% filter(prof_var == p) %>% pull(value)
  )
  
  all_mcaps[[p]] <- mcap_tmp
  tmp_ci <- mcap_tmp$ci
  names(tmp_ci) <- c("lower", "upper")
  
  all_ci[[p]] <- c(tmp_ci, 'mle' = mcap_tmp$mle)
}

all_mcaps <- purrr::map_df(
  prof_params,
  function(x) all_mcaps[[x]]$fit %>% mutate(prof_var = x)
)

all_ci <- all_ci |> as.data.frame() |> t() |> as.data.frame()
all_ci$prof_var <- rownames(all_ci)

h1_mles <- H1_profiles %>% slice_max(order_by = logLik) %>% 
  select(logLik, all_of(prof_params)) %>% 
  mutate(E_0 = E_0 * 10911819, I_0 = I_0 * 10911819,
         tau_epi = log(tau_epi), tau_end = log(tau_end)) %>%
  pivot_longer(
    cols = -logLik,
    names_to = 'prof_var',
    values_to = 'value'
  )
@

\begin{figure}[ht]
<<m1Profs, fig.height=5, fig.width=6, echo=FALSE, warning=FALSE, message=FALSE>>=
# Create a mapping between department names and what should be shown in figures
h1_plots <- list()
for (i in 1:length(prof_params)) {
  p = prof_params[i]
  if (p == 'betat') {
    my_lab <- TeX('$\\zeta')
  } else if (grepl('^beta[[:digit:]]$', p)) {
    num <- gsub('^beta', '', p)
    my_lab <- TeX(paste0('$\\beta_', num, '$'))
  } else if (p == 'E_0') {
    my_lab <- TeX('$E_0(0)$')
  } else if (p == 'I_0') {
    my_lab <- TeX('$I_0(0)$')
  } else if (p == 'nu' || p == 'rho') {
    my_lab <- TeX(paste0('$\\', p, '$'))
  } else if (p == 'sig_sq_epi') {
    my_lab <- TeX('$\\sigma_{proc}$: Epidemic')
  } else if (p == 'sig_sq_end') {
    my_lab <- TeX('$\\sigma_{proc}$: Endemic')
  } else if (p == 'tau_end') {
    my_lab <- TeX('$\\log(\\psi)$: Endemic')
  } else if (p == 'tau_epi') {
    my_lab <- TeX('$\\log(\\psi)$: Epidemic')
  }
  
  gg_tmp <- ggplot() +
    geom_point(
      data = H1_profiles_long %>% filter(prof_var == p), 
      aes(x = value, y = logLik)
    ) +
    geom_line(
      data = all_mcaps %>% filter(prof_var == p), 
      aes(x = parameter, y = smoothed), 
      col = 'blue'
    ) +
    # geom_line(data = all_mcaps, aes(x = parameter, y = quadratic), col = 'red') +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = lower), linetype = 'dashed'
    ) +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = upper), 
      linetype = 'dashed'
    ) +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = mle), col = 'blue'
    ) +
    # This code chunk below will plot the MLE along with the smoothed marginal 
    # MLEs and the confidence interval. 
    # geom_point(
    #   data = h1_mles %>% filter(prof_var == p), 
    #   aes(x = value, y = logLik), col = 'red'
    # ) +
    labs(y = 'Log-Likelihood', title = my_lab) +
    theme(
      axis.text = element_text(size = 8),
      axis.title = element_text(size = 10)
    ) +
    theme_bw() +
    scale_y_continuous(limits = c(-2770, max(H1_profiles$logLik))) + 
    theme(
      axis.title.x = element_blank(), 
      plot.title = element_text(
        hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
      axis.title.y = element_text(size = 8),
      axis.text.y = element_text(size = 7),
      axis.text.x = element_text(size = 6.5),
      plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
    )
  
  if (p == 'E_0') {
    gg_tmp <- gg_tmp + 
      scale_x_continuous(breaks = c(0, round(all_ci[p, 'upper'])))
  } else if (p == 'I_0') {
    gg_tmp <- gg_tmp + 
      scale_x_continuous(
        breaks = c(round(all_ci[p, 'lower']), round(all_ci[p, 'upper']))
      )
  } else if (p == 'nu') {
    gg_tmp <- gg_tmp + 
      scale_x_continuous(breaks = c(0.9, 0.95, 1.0))
  }
  
  if (i %in% seq(1, 16, 4)) {
    h1_plots[[i]] <- gg_tmp
  } else {
    h1_plots[[i]] <- gg_tmp + theme(
      axis.text.y = element_blank(), axis.ticks.y = element_blank(),
      axis.title.y = element_blank()
      )
  }
}

cowplot::plot_grid(
  plotlist = h1_plots,
  align = 'h', ncol = 4,
  rel_widths = c(1.25, 1, 1, 1)
)
@
\caption{\label{fig:m1Profs}MCAP confidence intervals for Model 1 parameters. The vertical blue line indicates the smoothed MLE.}
\end{figure}

\begin{table}[!h]
\centering
\caption{\label{tab:mod1CI}Model~1 parameter estimates and their corresponding confidence intervals, obtained via the MCAP algorithm.}
\vspace{2mm}
\begin{tabular}{|c|c|c|c|}
\hline
\textbf{Mechanism} & \textbf{Parameter} & \textbf{MLE} & $\bm{95\%}$ \textbf{Confidence Interval}
\\
\hline
\hline

 Seasonality & $\transmissionTrend$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'betat') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'betat') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'betat') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_1$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta1') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta1') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta1') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_2$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta2') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta2') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta2') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_3$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta3') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta3') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta3') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_4$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta4') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta4') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta4') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_5$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta5') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta5') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta5') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\transmission_6$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'beta6') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'beta6') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'beta6') %>% pull(upper), 3)})$ 
\\
\hline

 Observation Variance & $\obsOverdispersion: \mathrm{Epi}$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'tau_epi') %>% pull(value) %>% exp(), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'tau_epi') %>% pull(lower) %>% exp(), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'tau_epi') %>% pull(upper) %>% exp(), 3)})$ 
\\
\hline

 Observation Variance & $\obsOverdispersion: \mathrm{End}$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'tau_end') %>% pull(value) %>% exp(), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'tau_end') %>% pull(lower) %>% exp(), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'tau_end') %>% pull(upper) %>% exp(), 3)})$ 
\\
\hline

  Reporting Rate & $\reportRate$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'rho') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'rho') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'rho') %>% pull(upper), 3)})$ 
\\
\hline

  Mixing Exponent & $\mixExponent$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'nu') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'nu') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'nu') %>% pull(upper), 3)})$ 
\\
\hline

  Process noise {\small (wk\textsuperscript{1/2})} & $\sigmaProc: \mathrm{Epi}$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'sig_sq_epi') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'sig_sq_epi') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'sig_sq_epi') %>% pull(upper), 3)})$ 
\\
\hline

  Process noise {\small (wk\textsuperscript{1/2})} & $\sigmaProc: \mathrm{End}$ & $\Sexpr{myround(h1_mles %>% filter(prof_var == 'sig_sq_end') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'sig_sq_end') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'sig_sq_end') %>% pull(upper), 3)})$ 
\\
\hline

  Initial Values & $I_{0}(0)$ & $\Sexpr{round(h1_mles %>% filter(prof_var == 'I_0') %>% pull(value))}$
   &
  $(\Sexpr{round(all_ci %>% filter(prof_var == 'I_0') %>% pull(lower))}, \Sexpr{round(all_ci %>% filter(prof_var == 'I_0') %>% pull(upper))})$ 
\\
\hline

  Initial Values & $E_{0}(0)$ & $\Sexpr{round(h1_mles %>% filter(prof_var == 'E_0') %>% pull(value))}$
   &
  $(\Sexpr{round(all_ci %>% filter(prof_var == 'E_0') %>% pull(lower))}, \Sexpr{round(all_ci %>% filter(prof_var == 'E_0') %>% pull(upper))})$ 
\\
\hline

\end{tabular}
\end{table}

\subsection{Model~2 parameters}

Parameter estimates for Model~2, along with the profile likelihood confidence intervals for each estimate, are given in Table~\ref{tab:mod2CI}. 
Figure~\ref{fig:m2Profs} displays the profile log-likelihood curve near the MLE. 
In Table~\ref{tab:mod2CI}, the confidence interval for $\muRS^{-1}$, the duration of natural immunity due to cholera infection, is arbitrarily large (going to infinity). 
This is possible because the parameter that was estimated was $\muRS$, and the true MLE for this parameter is zero (see Figure~\ref{fig:m2Profs}). 
This suggests that the fitted model favors a regime where reinfection events are not possible. 
Similarly, the MLE for the parameter $\transmission$, which controls the amount of cholera transmission from human to human, is zero. 
Because Model~2 fails to describe the incidence data as well as a simple statistical benchmark, we must be careful to not interpret these results as evidence that reinfections and human-to-human infection events do not occur.
Instead, we may consider this as additional evidence of model mispecification. 

<<Load Model 2 Confidence Intervals, include=FALSE, message=FALSE, echo=FALSE>>=
h2_profiles <- readRDS("../model2/h2_profiles.rds") %>% as.data.frame()
h2_mles <- readRDS("../model2/model2_fit.rds")$h2_params

prof_params <- c(
  "Mu",
  "BetaW",
  "v",
  "phase",
  "Beta",
  "sigma"
)

h2_plots_lb <- numeric(length(prof_params))
h2_plots_ub <- numeric(length(prof_params))

names(h2_plots_lb) <- prof_params
names(h2_plots_ub) <- prof_params

h2_plots <- list()
for (i in 1:length(prof_params)) {
  p = prof_params[i]
  if (p == 'Mu') {
    my_lab <- TeX('$\\mu_W')
  } else if (p == 'Beta') {
    my_lab <- TeX('$\\beta^{1/5}$')
  } else if (p == 'BetaW') {
    my_lab <- TeX('$\\beta_W$')
  } else if (p == 'v') {
    my_lab <- TeX("$\\psi")
  } else if (p == 'sigma') {
    my_lab <- TeX('$\\mu^{1/5}_{RS}$')
  } else if (p == 'phase') {
    my_lab <- TeX('$\\phi')
  }
  
  if (p == 'Beta') {
    tmp_df_beta <- h2_profiles %>% 
      filter(prof_var == 'Beta') %>% 
      # filter(logLik >= -21965) %>%
      arrange(p)
    
    vals_beta <- tmp_df_beta[, 'Beta']^(1/5)
    
    profile_like_beta <- splinefun(x = vals_beta, y = tmp_df_beta[, 'logLik'])
    # max_profile <- optimize(profile_like, interval = range(vals), maximum = TRUE)
    max_profile_beta <- max(h2_profiles$logLik)
    threshold_beta <- max_profile_beta - 1.92
    plot_threshold_beta <- max_profile_beta - 6
    profile_roots_beta <- function(x) {profile_like_beta(x) - threshold_beta}
    plot_limits_beta <- function(x) {profile_like_beta(x) - plot_threshold_beta}
    
    upper_bound_beta <- uniroot(
      profile_roots_beta, 
      interval = c(vals_beta[which.max(tmp_df_beta$logLik)], max(vals_beta))
    )$root
    
    max_x_beta <- uniroot(
      plot_limits_beta, 
      interval = c(0, 7e-06^(1/5))
    )$root
    
    gg_tmp_beta <- ggplot() + 
      geom_point(
        data = tmp_df_beta %>% filter(prof_var == p) %>% filter(Beta <= max_x_beta^5),
        aes(x = Beta^(1/5), y = logLik)
      ) + 
      geom_function(fun = profile_like_beta) + 
      # geom_function(fun = function(x) profile_like_beta(x^(1/5))) + 
      # geom_vline(xintercept = upper_bound_beta^5, linetype = 'dashed') + 
      geom_vline(xintercept = upper_bound_beta, linetype = 'dashed') +
      geom_vline(xintercept = 0, col = 'blue') + 
      labs(y = 'Log-Likelihood', title = my_lab) + 
      theme(
        axis.text = element_text(size = 8),
        axis.title = element_text(size = 10)
      ) +
      theme_bw() +
      scale_y_continuous(limits = c(max_profile_beta-6, max_profile_beta)) +
      # scale_x_continuous(limits = c(0, max_x_beta^5)) +
      scale_x_continuous(limits = c(0, max_x_beta)) + 
      theme(
        axis.title.x = element_blank(), 
        plot.title = element_text(
          hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
        axis.title.y = element_text(size = 8),
        axis.text.y = element_text(size = 7),
        axis.text.x = element_text(size = 6.5),
        plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
      )
    
    h2_plots_lb['Beta'] <- 0
    h2_plots_ub['Beta'] <- upper_bound_beta^5
    
    if (i %in% c(1, 4)) {
      h2_plots[['beta']] <- gg_tmp_beta
    } else {
      h2_plots[['beta']] <- gg_tmp_beta + theme(
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.y = element_blank()
      )
    }
    
  } else if (p == 'sigma') {
    tmp_df_sigma <- h2_profiles %>% 
      filter(prof_var == 'sigma') %>% 
      # filter(logLik >= -21965) %>%
      arrange(p)
    
    vals_sigma <- tmp_df_sigma[, 'sigma']^(1/5)
    
    profile_like_sigma <- splinefun(x = vals_sigma, y = tmp_df_sigma[, 'logLik'])
    # max_profile <- optimize(profile_like, interval = range(vals), maximum = TRUE)
    max_profile_sigma <- max(h2_profiles$logLik)
    threshold_sigma <- max_profile_sigma - 1.92
    plot_threshold_sigma <- max_profile_sigma - 6
    profile_roots_sigma <- function(x) {profile_like_sigma(x) - threshold_sigma}
    plot_limits_sigma <- function(x) {profile_like_sigma(x) - plot_threshold_sigma}
    
    upper_bound_sigma <- uniroot(
      profile_roots_sigma, 
      interval = c(vals_sigma[which.max(tmp_df_sigma$logLik)], max(vals_sigma))
    )$root
    
    max_x_sigma <- uniroot(
      plot_limits_sigma, 
      interval = c(0, 0.0022^(1/5))
    )$root
    
    gg_tmp_sigma <- ggplot() + 
      geom_point(
        data = tmp_df_sigma %>% filter(prof_var == 'sigma') %>% filter(sigma <= max_x_sigma^5),
        aes(x = sigma^{1/5}, y = logLik)
      ) + 
      # geom_function(fun = function(x) profile_like_sigma(x^(1/5))) + 
      # geom_vline(xintercept = upper_bound_sigma^5, linetype = 'dashed') + 
      geom_function(fun = profile_like_sigma) + 
      geom_vline(xintercept = upper_bound_sigma, linetype = 'dashed') + 
      geom_vline(xintercept = 0, col = 'blue') + 
      labs(y = 'Log-Likelihood', title = my_lab) + 
      theme(
        axis.text = element_text(size = 8),
        axis.title = element_text(size = 10)
      ) +
      theme_bw() +
      scale_y_continuous(limits = c(max_profile_sigma-6, max_profile_sigma)) +
      # scale_x_continuous(limits = c(0, max_x_sigma^5)) +
      scale_x_continuous(limits = c(0, max_x_sigma)) +
      theme(
        axis.title.x = element_blank(), 
        plot.title = element_text(
          hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
        axis.title.y = element_text(size = 8),
        axis.text.y = element_text(size = 7),
        axis.text.x = element_text(size = 6.5),
        plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
      )
    
    h2_plots_lb['sigma'] <- 0
    h2_plots_ub['sigma'] <- upper_bound_sigma^5
    
    if (i %in% c(1, 4)) {
      h2_plots[['sigma']] <- gg_tmp_sigma
    } else {
      h2_plots[['sigma']] <- gg_tmp_sigma + theme(
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.y = element_blank()
      )
    }
    
  } else if (p == 'Mu') {
    
    tmp_df <- h2_profiles %>% 
      filter(prof_var == p) %>% 
      # filter(logLik >= -21957.26 - 4) %>%
      arrange(p)
    
    vals <- tmp_df[, p]
    
    profile_like <- splinefun(x = tmp_df[, p], y = tmp_df[, 'logLik'])
    max_profile <- optimize(profile_like, interval = range(vals), maximum = TRUE)
    threshold <- max_profile$objective - 1.92
    plot_threshold <- max_profile$objective - 6
    profile_roots <- function(x) {profile_like(x) - threshold}
    plot_limits <- function(x) {profile_like(x) - plot_threshold}
    
    lower_bound <- uniroot(
      profile_roots, 
      interval = c(min(vals), max_profile$maximum)
    )$root
    
    upper_bound <- uniroot(
      profile_roots, 
      interval = c(vals[which.max(tmp_df$logLik)], max(vals))
    )$root
    
    add_piece <- c(
      'Mu' = 3000, 'BetaW' = 0.3, 'phase' = 0.2, v = 0.5 
    )
    
    max_x <- uniroot(
      plot_limits, 
      interval = c(max_profile$maximum, max(vals) + add_piece[p])
    )$root
    
    min_x <- uniroot(
      plot_limits, 
      interval = c(min(vals) - add_piece[p], max_profile$maximum)
    )$root
    
    h2_plots_lb[p] <- lower_bound
    h2_plots_ub[p] <- upper_bound
    
    gg_tmp <- ggplot() + 
      geom_point(
        data = h2_profiles %>% 
          filter(prof_var == p) %>% 
          filter(.data[[p]] <= max_x & .data[[p]] >= min_x) ,
        aes(x = .data[[p]] / 52, y = logLik)
      ) + 
      geom_function(fun = profile_like) + 
      geom_vline(xintercept = lower_bound / 52, linetype = 'dashed') + 
      geom_vline(xintercept = upper_bound / 52, linetype = 'dashed') + 
      geom_vline(xintercept = max_profile$maximum / 52, col = 'blue') + 
      labs(y = 'Log-Likelihood', title = my_lab) + 
      theme(
        axis.text = element_text(size = 8),
        axis.title = element_text(size = 10)
      ) +
      theme_bw() +
      # scale_y_continuous(limits = c(-21963, -21957)) + 
      scale_y_continuous(limits = c(max(h2_profiles$logLik)-6, max(h2_profiles$logLik))) +
      scale_x_continuous(limits = c(min_x/52, max_x/52)) + 
      theme(
        axis.title.x = element_blank(), 
        plot.title = element_text(
          hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
        axis.title.y = element_text(size = 8),
        axis.text.y = element_text(size = 7),
        axis.text.x = element_text(size = 6.5),
        plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
      )
    
    if (i %in% c(1, 4)) {
      h2_plots[[p]] <- gg_tmp
    } else {
      h2_plots[[p]] <- gg_tmp + theme(
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.y = element_blank()
      )
    }
  } else {
    tmp_df <- h2_profiles %>% 
      filter(prof_var == p) %>% 
      # filter(logLik >= -21957.26 - 4) %>%
      arrange(p)
    
    vals <- tmp_df[, p]
    
    profile_like <- splinefun(x = tmp_df[, p], y = tmp_df[, 'logLik'])
    max_profile <- optimize(profile_like, interval = range(vals), maximum = TRUE)
    threshold <- max_profile$objective - 1.92
    plot_threshold <- max_profile$objective - 6
    profile_roots <- function(x) {profile_like(x) - threshold}
    plot_limits <- function(x) {profile_like(x) - plot_threshold}
    
    lower_bound <- uniroot(
      profile_roots, 
      interval = c(min(vals), max_profile$maximum)
    )$root
    
    upper_bound <- uniroot(
      profile_roots, 
      interval = c(vals[which.max(tmp_df$logLik)], max(vals))
    )$root
    
    add_piece <- c(
      'Mu' = 3000, 'BetaW' = 0.3, 'phase' = 0.2, v = 0.5 
    )
    
    max_x <- uniroot(
      plot_limits, 
      interval = c(max_profile$maximum, max(vals) + add_piece[p])
    )$root
    
    min_x <- uniroot(
      plot_limits, 
      interval = c(min(vals) - add_piece[p], max_profile$maximum)
    )$root
    
    h2_plots_lb[p] <- lower_bound
    h2_plots_ub[p] <- upper_bound
    
    gg_tmp <- ggplot() + 
      geom_point(
        data = h2_profiles %>% 
          filter(prof_var == p) %>% 
          filter(.data[[p]] <= max_x & .data[[p]] >= min_x) ,
        aes(x = .data[[p]], y = logLik)
      ) + 
      geom_function(fun = profile_like) + 
      geom_vline(xintercept = lower_bound, linetype = 'dashed') + 
      geom_vline(xintercept = upper_bound, linetype = 'dashed') + 
      geom_vline(xintercept = max_profile$maximum, col = 'blue') + 
      labs(y = 'Log-Likelihood', title = my_lab) + 
      theme(
        axis.text = element_text(size = 8),
        axis.title = element_text(size = 10)
      ) +
      theme_bw() +
      # scale_y_continuous(limits = c(-21963, -21957)) + 
      scale_y_continuous(limits = c(max(h2_profiles$logLik)-6, max(h2_profiles$logLik))) +
      scale_x_continuous(limits = c(min_x, max_x)) + 
      theme(
        axis.title.x = element_blank(), 
        plot.title = element_text(
          hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
        axis.title.y = element_text(size = 8),
        axis.text.y = element_text(size = 7),
        axis.text.x = element_text(size = 6.5),
        plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
      )
    
    if (i %in% c(1, 4)) {
      h2_plots[[p]] <- gg_tmp
    } else {
      h2_plots[[p]] <- gg_tmp + theme(
        axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.y = element_blank()
      )
    }
  }
}
@

\begin{figure}[ht]
<<m2Profs, fig.height=3, fig.width=5, echo=FALSE, warning=FALSE, message=FALSE>>=
cowplot::plot_grid(
  plotlist = h2_plots, ncol = 3,
  align = 'h',
  rel_widths = c(1.15, 1, 1)
)
@
\caption{\label{fig:m2Profs}MCAP confidence intervals for Model 2 parameters. The vertical blue line indicates the MLE.}
\end{figure}

\begin{table}[!h]
\centering
\caption{\label{tab:mod2CI}Model~2 parameter estimates and their corresponding confidence intervals, obtained via profile likelihood.}
\vspace{2mm}
\begin{tabular}{|c|c|c|c|}
\hline
\textbf{Mechanism} & \textbf{Parameter} & \textbf{MLE} & $\bm{95\%}$ \textbf{Confidence Interval}
\\
\hline
\hline

 Human to water shedding {\small (wk\textsuperscript{-1})} & $\Wshed$ & $\Sexpr{myround(h2_mles['Mu']/52, 1)}$
   &
  $(\Sexpr{myround(h2_plots_lb['Mu']/52, 1)}, \Sexpr{myround(h2_plots_ub['Mu']/52, 1)})$ 
\\
\hline

 Water to Human Infection {\small (yr\textsuperscript{-1})} & $\beta_W$ & $\Sexpr{myround(h2_mles['BetaW'], 3)}$
   &
  $(\Sexpr{myround(h2_plots_lb['BetaW'], 3)}, \Sexpr{myround(h2_plots_ub['BetaW'], 3)})$ 
\\
\hline

 Observation Variance & $\obsOverdispersion$ & $\Sexpr{myround(h2_mles['v'], 3)}$
   &
  $(\Sexpr{myround(h2_plots_lb['v'], 3)}, \Sexpr{myround(h2_plots_ub['v'], 3)})$ 
\\
\hline

 Seasonality & $\phaseParm$ & $\Sexpr{myround(h2_mles['phase'], 3)}$
   &
  $(\Sexpr{myround(h2_plots_lb['phase'], 3)}, \Sexpr{myround(h2_plots_ub['phase'], 3)})$ 
\\
\hline

Human to Human Infection {\small (yr\textsuperscript{-1})} & $\transmission$ & $\Sexpr{signif(h2_mles['Beta'], 3)}$\textsuperscript{*}
   &
  $[0, \Sexpr{signif(h2_plots_ub['Beta'], 3)})$ 
\\
\hline

Immunity {\small (yr)} & $\muRS^{-1}$ & $\Sexpr{signif(1/h2_mles['sigma'], 3)}$\textsuperscript{*}
   &
  $(\Sexpr{signif(1/h2_plots_ub['sigma'], 3)}, \inf)$ 
\\
\hline

\end{tabular}
\begin{flushleft} 
\textsuperscript{*}As evident in Figure~\ref{fig:m2Profs}, the true MLE for these parameters is $0$ and $\infty$, respectively; this value could not be obtained numerically due to the parameter transformation applied to the parameter for the model fitting processes.
\end{flushleft}
\end{table}

\subsection{Model~3 parameters}

Parameter estimates for Model~3, along with the MCAP confidence intervals for the estimate, are given in Table~\ref{tab:mod3CI}. 
Figure~\ref{fig:m3Profs} displays the Monte Carlo evaluations of the profile likelihood values, obtained using a particle filter. 

<<Load Model 3 Profiles, include=FALSE, message=FALSE, echo=FALSE>>=
H3_profiles1 <- readRDS('../model3/run_level_3/h3_profiles.rds') %>% 
  filter(prof_var == 'std_W')
H3_profiles2 <- readRDS("../model3/run_level_3/h3_profiles2.rds")
H3_profiles3 <- readRDS("../model3/run_level_3/h3_profiles3.rds")

H3_MLE_evals <- readRDS('../model3/run_level_3/h3_MLE_eval.rds')

H3_profiles <- bind_rows(H3_profiles1, H3_profiles2, H3_profiles3)

prof_params <- unique(H3_profiles$prof_var)

H3_profiles_long <- H3_profiles %>%
  select(prof_var, logLik, logLik_se, all_of(paste0(prof_params, '1'))) %>%
  rename_with(~ sub("1$", "", .x)) %>%
  mutate(mu_B = mu_B / 52) %>% 
  mutate(thetaI = thetaI / 52) %>% 
  mutate(std_W =  std_W * sqrt(52)) %>%
  select(-epsilon, -XthetaA) %>% 
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(variable == prof_var) %>%
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 1)

H3_remaining_long <- H3_profiles %>% 
  select(prof_var, logLik, logLik_se, epsilon1, XthetaA1) %>% 
  rename(epsilon = epsilon1, XthetaA = XthetaA1) %>% 
  mutate(XthetaA = sqrt(XthetaA)) %>%
  mutate(epsilon = epsilon^2) %>%
  # mutate(std_W =  std_W * sqrt(52)) %>% 
  pivot_longer(
    cols = -c(prof_var, logLik, logLik_se),
    names_to = 'variable',
    values_to = 'value'
  ) %>%
  filter(variable == prof_var) %>%
  group_by(prof_var, value) %>%
  slice_max(order_by = logLik, n = 2)

H3_profiles_long <- bind_rows(
  H3_profiles_long, H3_remaining_long
)
@

<<Create Confidence intervals>>=
all_mcaps <- list()
all_ci <- list()
for (p in prof_params) {
  
  mcap_tmp <- mcap(
    logLik = H3_profiles_long %>% filter(prof_var == p) %>% pull(logLik),
    parameter = H3_profiles_long %>% filter(prof_var == p) %>% pull(value),
    span = case_when(
      p == 'r' ~ 1,
      p == 'XthetaA' ~ 0.7,
      TRUE ~ 0.75
    )
  )
  
  all_mcaps[[p]] <- mcap_tmp
  tmp_ci <- mcap_tmp$ci
  names(tmp_ci) <- c("lower", "upper")
  
  all_ci[[p]] <- c(tmp_ci, 'mle' = mcap_tmp$mle)
}

all_mcaps <- purrr::map_df(
  prof_params,
  function(x) all_mcaps[[x]]$fit %>% mutate(prof_var = x)
)

all_ci <- all_ci |> as.data.frame() |> t() |> as.data.frame()
all_ci$prof_var <- rownames(all_ci)

# Transform epsilong (rho) to natural scale
all_ci <- all_ci %>% 
  mutate(
    lower = case_when(
      prof_var == 'epsilon' ~ sqrt(lower), 
      # prof_var == 'XthetaA' ~ lower^2,
      TRUE ~ lower
    ),
    upper = case_when(
      prof_var == 'epsilon' ~ sqrt(upper), 
      # prof_var == 'XthetaA' ~ upper^2,
      TRUE ~ upper
    ),
    mle = case_when(
      prof_var == 'epsilon' ~ sqrt(mle), 
      # prof_var == 'XthetaA' ~ mle^2,
      TRUE ~ mle
    )
  )

all_mcaps <- all_mcaps %>% 
  mutate(
    parameter = case_when(
      prof_var == 'epsilon' ~ sqrt(parameter), 
      # prof_var == 'XthetaA' ~ parameter^2,
      TRUE ~ parameter
      )
  )

H3_profiles_long <- H3_profiles_long %>% 
  mutate(
    value = case_when(
      prof_var == 'epsilon'~ sqrt(value), 
      # prof_var == 'XthetaA' ~ value^2,
      TRUE ~ value
    )
  )

# This chunk of code returns the MLE for model 3
h3_mles <- H3_MLE_evals %>%
  slice_max(order_by = logLik, n = 1) %>%
  select(logLik, all_of(paste0(prof_params, '1'))) %>%
  rename_with(~ sub("1$", "", .x)) %>%
  mutate(XthetaA = sqrt(XthetaA)) %>%
  pivot_longer(
    cols = -c(logLik),
    names_to = 'prof_var',
    values_to = 'value'
  )
@

\begin{figure}[ht]
<<m3Profs, fig.height=4.6, fig.width=5.8, echo=FALSE, warning=FALSE, message=FALSE>>=
h3_plots <- list()
for (i in 1:length(prof_params)) {
  p = prof_params[i]
  if (p == 'mu_B') {
    my_lab <- TeX('$\\delta_W$')
  } else if (p == 'XthetaA') {
    my_lab <- TeX('$\\sqrt{\\epsilon_W}$')
  } else if (p == 'thetaI') {
    my_lab <- TeX('$\\mu_W$')
  } else if (p == 'lambdaR') {
    my_lab <- TeX('$a$')
  } else if (p == 'r') {
    my_lab <- TeX('$r$')
  } else if (p == 'std_W') {
    my_lab <- TeX('$\\sigma_{proc}$')
  } else if (p == 'epsilon') {
    my_lab <- TeX('$\\rho$')
  } else if (p == 'k') {
    my_lab <- TeX('$\\psi$')
  }
  
  gg_tmp <- ggplot() +
    geom_point(
      data = H3_profiles_long %>% filter(prof_var == p), 
      aes(x = value, y = logLik)
    ) +
    geom_line(
      data = all_mcaps %>% filter(prof_var == p), 
      aes(x = parameter, y = smoothed), 
      col = 'blue'
    ) +
    # geom_line(data = all_mcaps, aes(x = parameter, y = quadratic), col = 'red') +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = lower), linetype = 'dashed'
    ) +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = upper), 
      linetype = 'dashed'
    ) +
    geom_vline(
      data = all_ci %>% filter(prof_var == p), 
      aes(xintercept = mle), col = 'blue'
    ) +
    # This commented out code below will plot the MLE along with the confidence 
    # intervals for the given parameter. 
    # geom_point(
    #   data = h3_mles %>% filter(prof_var == p),
    #   aes(x = value, y = logLik), col = 'red'
    # ) +
    labs(y = 'Log-Likelihood', title = my_lab) +
    theme(
      axis.text = element_text(size = 8),
      axis.title = element_text(size = 10)
    ) +
    theme_bw() +
    scale_y_continuous(limits = c(-17450, max(H3_profiles$logLik))) +
    # scale_y_continuous(limits = c(-17450, max(H3_MLE_evals$logLik))) +
    theme(
      axis.title.x = element_blank(), 
      plot.title = element_text(
        hjust = 0.5, size = 8, margin = margin(t = 0, unit = "pt")
        ),
      axis.title.y = element_text(size = 8),
      axis.text.y = element_text(size = 7),
      axis.text.x = element_text(size = 6.5),
      plot.margin = margin(5.5, 3, 0, -1, unit = 'pt')
    ) + 
    theme(legend.position = 'none')
  
  if (i %in% seq(1, 9, 3)) {
    h3_plots[[i]] <- gg_tmp
  } else {
    h3_plots[[i]] <- gg_tmp + theme(
      axis.text.y = element_blank(), axis.ticks.y = element_blank(),
      axis.title.y = element_blank()
      )
  }
}

cowplot::plot_grid(
  plotlist = h3_plots,
  align = 'h', ncol = 3,
  rel_widths = c(1.25, 1, 1, 1)
)
@
\caption{\label{fig:m3Profs}MCAP confidence intervals for Model 3 parameters. The vertical blue line indicates the smoothed MLE.}
\end{figure}

\begin{table}[!h]
\centering
\caption{\label{tab:mod3CI}Model~3 parameter estimates and their corresponding confidence intervals, obtained via the MCAP algorithm.}
\vspace{2mm}
\begin{tabular}{|c|c|c|c|}
\hline
\textbf{Mechanism} & \textbf{Parameter} & \textbf{MLE} & $\bm{95\%}$ \textbf{Confidence Interval}
\\
\hline
\hline

 Process Noise {\small (wk\textsuperscript{1/2})} & $\sigmaProc$ & $\Sexpr{myround((h3_mles %>% filter(prof_var == 'std_W') %>% pull(value)) * sqrt(52), 3)}$
   &
  $(\Sexpr{myround((all_ci %>% filter(prof_var == 'std_W') %>% pull(lower)), 3)}, \Sexpr{myround((all_ci %>% filter(prof_var == 'std_W') %>% pull(upper)), 3)})$ 
\\
\hline

 Water Survival {\small (wk)} & $\Wremoval^{-1}$ & $\Sexpr{myround(52 / (h3_mles %>% filter(prof_var == 'mu_B') %>% pull(value)), 3)}$
   &
  $(\Sexpr{myround(1 / (all_ci %>% filter(prof_var == 'mu_B') %>% pull(upper)), 3)}, \Sexpr{myround(1 / (all_ci %>% filter(prof_var == 'mu_B') %>% pull(lower)), 3)})$ 
\\
\hline

 Human to Water Shedding {\small $\frac{\mathrm{km^2}}{\mathrm{wk}}$} & $\Wshed$ & $\Sexpr{signif((h3_mles %>% filter(prof_var == 'thetaI') %>% pull(value))/52, 3)}$
   &
  $(\Sexpr{signif(all_ci %>% filter(prof_var == 'thetaI') %>% pull(lower), 3)}, \Sexpr{signif(all_ci %>% filter(prof_var == 'thetaI') %>% pull(upper), 3)})$ 
\\
\hline

 Asymptomatic Shedding & $\asymptomRelativeShed$ & $\Sexpr{myround((h3_mles %>% filter(prof_var == 'XthetaA') %>% pull(value))^2, 3)}$
   &
  $(\Sexpr{myround((all_ci %>% filter(prof_var == 'XthetaA') %>% pull(lower))^2, 1)}, \Sexpr{myround((all_ci %>% filter(prof_var == 'XthetaA') %>% pull(upper))^2, 3)})$ 
\\
\hline

 Seasonality & $\seasAmplitude$ & $\Sexpr{myround(h3_mles %>% filter(prof_var == 'lambdaR') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'lambdaR') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'lambdaR') %>% pull(upper), 3)})$ 
\\
\hline

 Seasonality & $\rainfallExponent$ & $\Sexpr{myround(h3_mles %>% filter(prof_var == 'r') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'r') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'r') %>% pull(upper), 3)})$ 
\\
\hline

 Reporting Rate & $\reportRate$ & $\Sexpr{myround(h3_mles %>% filter(prof_var == 'epsilon') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'epsilon') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'epsilon') %>% pull(upper), 3)})$ 
\\
\hline

 Observation Variance & $\obsOverdispersion$ & $\Sexpr{myround(h3_mles %>% filter(prof_var == 'k') %>% pull(value), 3)}$
   &
  $(\Sexpr{myround(all_ci %>% filter(prof_var == 'k') %>% pull(lower), 3)}, \Sexpr{myround(all_ci %>% filter(prof_var == 'k') %>% pull(upper), 3)})$ 
\\
\hline

\end{tabular}
\end{table}

%%%%%%%%%% END

\bibliography{../bib-haiti}

\end{document}

